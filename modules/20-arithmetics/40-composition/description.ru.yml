---

name: Композиция операций
theory: |
  А что, если понадобится вычислить такое выражение: *3 + 5 - 2*? Именно так мы и запишем:

  ```java
  System.out.println(3 + 5 - 2); // 3 + 5 - 2 => 8 - 2 => 6
  ```

  Обратите внимание, что компьютер производит арифметические вычисления в правильном порядке: сначала деление и умножение, потом сложение и вычитание. Иногда этот порядок нужно изменить — об этом немного далее.

  Или другой пример:

  ```java
  System.out.println(2 * 4 * 5 * 10); // 2 * 4 * 5 * 10 => 8 * 5 * 10 => 40 * 10 => 400
  ```

  Как видно, операции можно соединять друг с другом и таким образом вычислять все более сложные составные выражения. Чтобы представить себе то, как происходят вычисления внутри интерпретатора, давайте разберем пример:

  ```
  2 * 4 * 5 * 10
  ```

  В этом примере:

  1. Сначала вычисляем *2 * 4* и получаем выражение *8 * 5 * 10*
  2. Затем умножаем *8 * 5*. В итоге имеем *40 * 10*
  3. В конце концов происходит последнее умножение, и получается результат *400*

instructions: |

  Реализуйте программу, которая вычисляет значение выражения `8 / 2 + 5 - -3 / 2` и выводит результат на экран. Не вычисляйте ничего самостоятельно, ваша программа должна производить все вычисления сама.
  <pre class='hexlet-basics-output'>
  10
  </pre>
  Обратите внимание, что интерпретатор производит арифметические вычисления в правильном порядке: сначала деление и умножение, потом сложение и вычитание. Иногда этот порядок нужно изменить — об этом следующий урок.

  Также обратите внимание на то, что в java по умолчанию используется целочисленное деление, `3 / 2` будет `1`.


# tips: []
