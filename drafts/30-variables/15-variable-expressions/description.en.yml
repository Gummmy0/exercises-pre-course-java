---

name: Выражения в определениях

theory: |
  Переменные полезны не только для хранения и переиспользования информации, но и для упрощения сложных вычислений.

  Давайте рассмотрим пример: нужно перевести евро в рубли через доллары. Подобные конвертации через промежуточную валюту часто делают банки при покупках за рубежом.

  Для начала переведем 50 евро в доллары. Допустим, что один евро — 1.25 доллара:

  ```java
  var dollarsCount = 50 * 1.25;
  System.out.println(dollarsCount);
  ```

  В предыдущем блоке мы записывали в переменную конкретное значение. А здесь справа от знака равно находится **выражение**:

  ```java
  var dollarsCount = 50 * 1.25;`
  ```

  Программа вычислит результат *62.5* и запишет его в переменную. С точки зрения программы не важно, что написано: *62.5* или *50 * 1.25*. Оба варианта — выражения, которые надо вычислить. И они вычисляются в одно и то же значение *62.5*.

  Любая строка — выражение. Конкатенация строк — тоже выражение. Когда программа видит выражение, она вычисляет его и **возвращает** результат.

  Вот несколько примеров выражений. В комментариях справа от каждого выражения записано итоговое значение:

  ```java
  62.5            // 62.5
  50 * 1.25       // 62.5
  120 / 10 * 2    // 24
  "Hexlet"         // "Hexlet"
  "Good" + "will" // "Goodwill"
  ```

  По правилам построения кода таковы, что в тех местах, где ожидается выражение, можно поставить любое вычисление. Причем вычисление может быть не только математическое, но и строковое — например, конкатенация. При этом программа останется работоспособной.

  По этой причине невозможно описать и показать все случаи использования всех операций. Программы состоят из множества комбинаций выражений, и понимание этой концепции — один из ключевых шагов на вашем пути.

  Вернемся к нашей валютной программе. Запишем стоимость доллара в рублях, как отдельную переменную. Вычислим цену 50 евро в долларах, умножив их на 1.25. Допустим, что 1 доллар — 60 рублей:

  ```java
  var rublesPerDollar = 60;
  var dollarsCount = 50 * 1.25; // 62.5
  var rublesCount = dollarsCount * rublesPerDollar; // 3750
  System.out.println(rublesCount); // => 3750
  ```

  А теперь давайте добавим к выводу текст с помощью конкатенации:

  ```java
  var rublesPerDollar = 60;
  var dollarsCount = 50 * 1.25; // 62.5
  var rublesCount = dollarsCount * rublesPerDollar; // 3750
  System.out.println("The price is " + rublesCount + " rubles");
  // => The price is 3750 rubles
  ```

  https://replit.com/@hexlet/java-basics-variables-3

  Любая переменная может быть частью любого выражения. В момент вычисления вместо имени переменной подставляется ее значение. Значение `dollarsCount` вычисляется до того, как она начнет использоваться в других выражениях. Когда подходит момент использования переменной, Java знает значение, потому что уже вычислил его.

instructions: |

  Напишите программу, которая берет исходное количество евро, записанное в переменную `eurosCount`, переводит евро в доллары и выводит на экран. Затем полученное значение переводит в рубли и выводит на новой строчке.

  Пример вывода для 100 евро:

  <pre class='hexlet-basics-output'>
  125.0
  7500.0
  </pre>

  Считаем, что:

  - 1 евро = 1.25 долларов
  - 1 доллар = 60 рублей

tips:
  - |
    Для перевода строчки можно использовать `\n` между выводом долларов и рублей, либо нужное количество раз использовать метод `println()`.
